{
  "nodes": [
    {
      "parameters": {},
      "id": "5d60c1fe-1299-4309-87d1-9de9216df828",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -304,
        80
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.itflow.apiUrl }}/clients/read.php ",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "={{ $json.itflow.apiKey }}"
            },
            {
              "name": "limit",
              "value": "99999"
            }
          ]
        },
        "options": {}
      },
      "id": "209cdb16-367b-4315-9247-12dc2a648af2",
      "name": "itFlow - Get Clients",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -16,
        288
      ]
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "id": "6c4905cc-b016-46b0-990b-26e1951b7783",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        576,
        448
      ]
    },
    {
      "parameters": {},
      "id": "5ccd9dd4-4023-4647-91ab-1bc737c4456c",
      "name": "Next Client",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1280,
        592
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 10
            }
          ]
        }
      },
      "id": "05e851e7-e458-4e6d-a6bb-cad7f7bb2b6f",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -304,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Define your variables here'].json.itflow.apiUrl }}/clients/create.php",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "={{ $node['Define your variables here'].json.itflow.apiKey }}"
            },
            {
              "name": "client_name",
              "value": "={{ $json.name }}"
            },
            {
              "name": "client_type"
            },
            {
              "name": "client_website"
            },
            {
              "name": "client_referral"
            },
            {
              "name": "client_rate"
            },
            {
              "name": "client_net_terms"
            }
          ]
        },
        "options": {}
      },
      "id": "35ca84e1-6572-4eb3-ab47-f0f84eafdaf8",
      "name": "itFlow - Create Client",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        752,
        752
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "=data",
        "options": {}
      },
      "id": "24a122de-fedd-448f-9cb7-6177d5a79926",
      "name": "List ITFlow Clients",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 1,
      "position": [
        208,
        288
      ]
    },
    {
      "parameters": {
        "operation": "aggregateItems",
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "rmm"
      },
      "id": "3ac194a1-f46d-44a9-83af-8b431879ca3a",
      "name": "List TRMM Clients",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 1,
      "position": [
        208,
        464
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "itflow.client_id",
              "value": "={{ $json.client_id }}"
            },
            {
              "name": "itflow.client_name",
              "value": "={{ $json.client_name }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ac94999a-49ef-473f-8bc6-1f71a0250303",
      "name": "Save only the Client_ID and Client_Name",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        416,
        288
      ]
    },
    {
      "parameters": {
        "url": "={{ $('Define your variables here').item.json.rmm.apiUrl }}/clients",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{ $('Define your variables here').item.json.rmm.apiKey }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e21906af-2798-4222-bac4-037bf83ff164",
      "name": "TRMM - Get Clients",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -16,
        528
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "content": "Leave only the items in TRMM that don't exist in ITFlow and are not excluded\n\n",
        "height": 80,
        "width": 215
      },
      "id": "492c97fd-8bc7-4f7f-9859-07239431ed2a",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        144,
        912
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "3202941a-f8a9-43ea-a233-9f752d8cc5f3",
      "name": "If there are clients to add",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        464,
        784
      ]
    },
    {
      "parameters": {
        "jsCode": "let rmmClients = $node['List TRMM Clients'].json.rmm;\n\nfor (const item of $input.all()) {\n\n  // find a matching RMM client by comparing the RMM client name \n  // with the itFlow client name from the current item\n  let rmmMatch = rmmClients.find(x => x.name == item.json.itflow.client_name);\n\n  if (rmmMatch) {\n    // RMM client exists — mark for agent import\n    item.json.importAgents = true;\n    item.json.rmm = rmmMatch;  // attach the matching RMM client data\n  } else {\n    // no matching RMM client found — skip agent import\n    item.json.importAgents = false;\n  }\n}\n\n// return all modified input items\nreturn $input.all();\n"
      },
      "id": "6a108abf-ea3d-4219-9b0a-0315f9103ee8",
      "name": "Attach ITFlow Details to TRMM JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        784,
        448
      ]
    },
    {
      "parameters": {
        "url": "={{ $node['Define your variables here'].json.rmm.apiUrl }}/agents",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "client",
              "value": "={{ $json.rmm.id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{ $node['Define your variables here'].json.rmm.apiKey }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d1f43cb7-e287-4f5b-98c5-893484cb2f82",
      "name": "Retrieve TRMM Agent list for Client",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1472,
        320
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.importAgents }}",
              "value2": true
            }
          ]
        }
      },
      "id": "e139209d-6ef1-42b1-bd6a-b2e70dbc182b",
      "name": "If we need to import machine data from TRMM -> ITFlow",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1008,
        448
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "d45f823c-c084-40c3-a805-5f6ed62fc211",
      "name": "Loop through all Clients",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        1264,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "let assets = [];\nlet asset;\n\nfor (const item of $input.all()) {\n  asset = {};\n  asset.payload = {};\n\n  // basic identity\n  asset.payload.asset_name = item.json.hostname;\n  asset.payload.asset_description = item.json.description;\n  asset.payload.asset_model = item.json.make_model.replace('\\n', '');\n\n  // asset type mapping: workstation → Desktop; server → Server/VM (QEMU heuristic)\n  if (item.json.monitoring_type == 'workstation') {\n    asset.payload.asset_type = 'Desktop';\n  } else {\n    if (item.json.monitoring_type == 'server') {\n      if (asset.payload.asset_model.includes('QEMU')) {\n        asset.payload.asset_type = 'Virtual Machine';\n      } else {\n        asset.payload.asset_type = 'Server';\n      }\n    }\n  }\n\n  asset.payload.asset_serial = item.json.serial_number;\n  asset.payload.asset_os = item.json.operating_system;\n\n  try {\n    // choose the first valid IPv4, skipping invalid/undesired ranges (IPv6, zerotier, link-local, custom nets)\n    item.json.local_ips.split(',').forEach(function (ip) {\n      if (ip.includes(\"error\") || ip.includes(\"::\") || ip.includes(\"2804:\")) {\n        asset.payload.asset_ip = '';\n      } else {\n        if (ip.includes('169.254')) {\n          asset.payload.asset_ip = '';\n        } else {\n          asset.payload.asset_ip = ip.split('/')[0];\n          // break out of forEach early once we’ve set a good IP\n          throw new Error(\"StopIteration\");\n        }\n      }\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n\n  // TODO: compare last_seen and, if offline for a long time, mark as \"Retired\"\n  asset.payload.asset_status = \"Deployed\";\n\n  // build notes: CPU count × model, then GPU, then list physical disks\n  asset.payload.asset_notes =\n    item.json.cpu_model.length + ' x ' + item.json.cpu_model[0] + '\\n' +\n    item.json.graphics + '\\n';\n\n  item.json.physical_disks.forEach(function (disk) {\n    asset.payload.asset_notes += disk + '\\n';\n  });\n\n  // deep link to agent in RMM UI\n  asset.payload.asset_uri =\n    $node['Define your variables here'].json.rmm.rmmUrl + \"/agents/\" + item.json.agent_id;\n\n  // itFlow / client context and auth\n  asset.client = $node['Loop through all Clients'].json.itflow;\n  asset.payload.api_key = $node['Define your variables here'].json.itflow.apiKey;\n  asset.payload.client_id = asset.client.client_id;\n\n  // collect the assembled asset\n  assets.push(asset); // append this asset object to the output array\n}\n\nreturn assets;\n"
      },
      "id": "a2dcce02-f5a7-4be1-b561-a9cd79eead01",
      "name": "Build TRMM asset details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1680,
        320
      ]
    },
    {
      "parameters": {
        "url": "={{ $('Define your variables here').item.json.itflow.apiUrl }}/assets/read.php",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "client_id",
              "value": "={{ $json.client.client_id }}"
            },
            {
              "name": "asset_name",
              "value": "={{ $json.payload.asset_name }}"
            },
            {
              "name": "api_key",
              "value": "={{ $('Define your variables here').item.json.itflow.apiKey }}"
            }
          ]
        },
        "options": {}
      },
      "id": "319318f3-f700-4ea8-9985-5b65aebfc5ad",
      "name": "Check ITFlow for existing asset",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1968,
        320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Define your variables here').item.json.itflow.apiUrl }}/assets/create.php",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($('Build TRMM asset details').item.json[\"payload\"]) }}",
        "options": {}
      },
      "id": "8571d541-5e36-4f9b-a925-9844c5c490df",
      "name": "ITFlow - Create Asset",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1792,
        624
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "=={{ (( $json.data && $json.data[0] && $json.data[0].asset_description ) || '' ) }}\n",
              "operation": "notEqual",
              "value2": "=={{ ( $('Build TRMM asset details').item.json.payload.asset_description || '' ) }}\n"
            },
            {
              "value1": "=={{ (( $json.data && $json.data[0] && $json.data[0].asset_ip ) || '' ).trim() }}\n",
              "operation": "notEqual",
              "value2": "=={{ ( $('Build TRMM asset details').item.json.payload.asset_ip || '' ).trim() }}\n"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "eadf8dd4-f5a8-4803-a2da-99177a174b3f",
      "name": "If The TRMM Data differs from the ITFlow Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1920,
        896
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "api_key",
              "value": "={{ $('Build TRMM asset details').item.json.payload.api_key }}"
            },
            {
              "name": "client_id",
              "value": "={{ $('Build TRMM asset details').item.json.payload.client_id }}"
            },
            {
              "name": "asset_id",
              "value": "={{ $json.data[0].asset_id }}"
            },
            {
              "name": "asset_description",
              "value": "={{ $('Build TRMM asset details').item.json.payload.asset_description }}"
            },
            {
              "name": "asset_ip",
              "value": "={{ $('Build TRMM asset details').item.json.payload.asset_ip }}"
            }
          ]
        },
        "options": {}
      },
      "id": "3455918c-d58c-47cb-a289-8d006f70891b",
      "name": "Restructure Data For Submission",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2176,
        912
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Define your variables here').item.json.itflow.apiUrl }}/assets/update.php",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "78a46255-2564-4a7b-9281-0cb602e601df",
      "name": "ITFlow - Update Asset",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2432,
        912
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.success }}",
              "value2": "True"
            }
          ]
        }
      },
      "id": "c8f74dbe-429b-4102-9192-0b4527735893",
      "name": "If The TRMM Machine exist in ITFlow1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1568,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "let itflowClients = $node['itFlow - Get Clients'].json.data;\nlet createClients = [];\n\n// pull the exclusion list from the main variable node and split into an array\nconst exclusions = $node['Define your variables here'].json.excludedClients\n  .split(',')\n  .map(e => e.trim());\n\nfor (const item of $input.all()) {\n\n  // look for a client in itFlow with the same name as this item\n  let itflowMatch = itflowClients.find(x => x.client_name == item.json.name);\n  \n  if (itflowMatch) {\n    // client already exists in itFlow\n  } else {\n    // client does not exist in itFlow\n\n    // skip any clients found in the exclusion list\n    if (exclusions.includes(item.json.name))\n      continue;\n\n    // add client to the list for creation (only non-excluded, non-existing clients)\n    createClients.push(item.json);\n  }\n}\n\nreturn createClients;"
      },
      "id": "53a443e0-a1af-4dfc-8a6a-b564241d85ac",
      "name": "Find TRMM Clients that don't exist in ITFlow",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        208,
        768
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "itflow.apiUrl",
              "value": "=https://itflow.domain.com/api/v1"
            },
            {
              "name": "itflow.apiKey",
              "value": "=<ITFLOW API KEY HERE>"
            },
            {
              "name": "rmm.apiUrl",
              "value": "https://api.domain.com"
            },
            {
              "name": "rmm.rmmUrl",
              "value": "https://rmm.domain.com"
            },
            {
              "name": "rmm.apiKey",
              "value": "<TRMM API KEY HERE>"
            },
            {
              "name": "excludedClients",
              "value": "=<ListOfClientsToExclude,SeparatedByCommas,Walmart,Costco,ClientName>"
            }
          ]
        },
        "options": {}
      },
      "id": "da77433c-92f2-4b54-862d-e6e3339f52d9",
      "name": "Define your variables here",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -32,
        32
      ]
    }
  ],
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Define your variables here",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "itFlow - Get Clients": {
      "main": [
        [
          {
            "node": "List ITFlow Clients",
            "type": "main",
            "index": 0
          },
          {
            "node": "TRMM - Get Clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Attach ITFlow Details to TRMM JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Next Client": {
      "main": [
        [
          {
            "node": "Loop through all Clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Define your variables here",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List ITFlow Clients": {
      "main": [
        [
          {
            "node": "Save only the Client_ID and Client_Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List TRMM Clients": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Save only the Client_ID and Client_Name": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TRMM - Get Clients": {
      "main": [
        [
          {
            "node": "List TRMM Clients",
            "type": "main",
            "index": 0
          },
          {
            "node": "Find TRMM Clients that don't exist in ITFlow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If there are clients to add": {
      "main": [
        [
          {
            "node": "itFlow - Create Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach ITFlow Details to TRMM JSON": {
      "main": [
        [
          {
            "node": "If we need to import machine data from TRMM -> ITFlow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve TRMM Agent list for Client": {
      "main": [
        [
          {
            "node": "Build TRMM asset details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If we need to import machine data from TRMM -> ITFlow": {
      "main": [
        [
          {
            "node": "Loop through all Clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop through all Clients": {
      "main": [
        [
          {
            "node": "Retrieve TRMM Agent list for Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build TRMM asset details": {
      "main": [
        [
          {
            "node": "Check ITFlow for existing asset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check ITFlow for existing asset": {
      "main": [
        [
          {
            "node": "If The TRMM Machine exist in ITFlow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ITFlow - Create Asset": {
      "main": [
        [
          {
            "node": "Next Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If The TRMM Data differs from the ITFlow Data": {
      "main": [
        [
          {
            "node": "Restructure Data For Submission",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Next Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restructure Data For Submission": {
      "main": [
        [
          {
            "node": "ITFlow - Update Asset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ITFlow - Update Asset": {
      "main": [
        [
          {
            "node": "Next Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If The TRMM Machine exist in ITFlow1": {
      "main": [
        [
          {
            "node": "If The TRMM Data differs from the ITFlow Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ITFlow - Create Asset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find TRMM Clients that don't exist in ITFlow": {
      "main": [
        [
          {
            "node": "If there are clients to add",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Define your variables here": {
      "main": [
        [
          {
            "node": "itFlow - Get Clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
